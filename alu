module alu (a, b, s, y);
input [7:0] a, b;
input [3:0] s;
output reg [7:0] y;
always @(*)
begin
  case (s)
    4'b0000: y = a + b;
    4'b0001: y = a - b;
    4'b0010: y = a * b;
    4'b0011: y = a / b;
    4'b0100: y = a & b;
    4'b0101: y = a | b;
    4'b0110: y = a ^ b;
    4'b0111: y = a ~^ b;
    4'b1000: y = a << b;
    4'b1001: y = a >> b;
    4'b1010: y = a <<< b;
    4'b1011: y = a >>> b;
    default: y = 8'bx; 
  endcase 
end
endmodule

module alu_tb;

reg [7:0] a, b;
reg [3:0] s;
wire [7:0] y;
integer i;

alu dut (a, b, s, y);

initial begin
  a = 8'd12; 
  b = 8'd8; 
  for (i = 0; i < 16; i = i + 1) begin
    s = i; 
    #10;
  end
  #200 $stop;
end

endmodule
